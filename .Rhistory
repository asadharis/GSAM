myf(x,y,y.ord,x.ord,theta,1e-4,80,4)
lam <- 80
max.lam <- 80
lseq <- seq(min.lam, max.lam, length = 100)
min.lam <- 1e-3
lseq <- seq(min.lam, max.lam, length = 100)
ans <- sapply(lseq, function(lam){
lam*sqrt(get.pen(spline_s(y, y.ord, x.ord, theta, lam)))
})
plot(lseq,ans,type = "l", ylim = range(c(lseq,lam)))
range(c(lseq,lam))
lam
plot(lseq,ans,type = "l", ylim = range(c(ans,lam)))
plot(lseq,ans,type = "l", ylim = range(c(ans,lam)))
abline(h=lam)
myf <- function(x,y, y.ord, x.ord, theta, min.lam, max.lam,lam = 0.1){
lseq <- seq(min.lam, max.lam, length = 100)
ans <- sapply(lseq, function(lam){
lam*sqrt(get.pen(spline_s(y, y.ord, x.ord, theta, lam)))
})
plot(lseq,ans,type = "l", ylim = range(c(ans,lam)))
abline(h=lam)
}
myf(x,y,y.ord,x.ord,theta,1e-4,80,4)
myf(x,y,y.ord,x.ord,theta,1e-4,800,4)
spline_s(y,y.ord, x.ord, theta, 80)
obj <- spline_s(y,y.ord, x.ord, theta, 80)
plot(obj$x,obj$y)
plot(obj$x,obj$y, type = "l")
plot(x,y)
lines(obj$x,obj$y, type = "l")
lines(obj$x,obj$y, type = "p", col = "red")
plot(x,y)
lines(obj$x,obj$y, type = "p", col = "red")
set.seed(2)
n <- 100
x <- runif(n, min = -2.5, max = 2.5)
y <- sin(x) + rnorm(n, sd = 0.2)
theta <- rep(0,length(y))
# lambda <- 0.01
ord <- order(x)
x.ord <- x[ord]
y.ord <- y[ord]
# obj <- spline_s(y,y.ord, x.ord, theta, 80)
# plot(x,y)
# lines(obj$x,obj$y, type = "p", col = "red")
library(uniSolve)
#junk <- tf_dp(y,y.ord,lambda,theta)
myf <- function(x,y, y.ord, x.ord, theta, min.lam, max.lam,lam = 0.1){
lseq <- seq(min.lam, max.lam, length = 100)
ans <- sapply(lseq, function(lam){
lam*sqrt(get.pen(spline_s(y, y.ord, x.ord, theta, lam)))
})
plot(lseq,ans,type = "l", ylim = range(c(ans,lam)))
abline(h=lam)
}
myf(x,y,y.ord,x.ord,theta,1e-4,800,4)
myf(x,y,y.ord,x.ord,theta,1e-4,5,4)
source('~/___00THESIS WORK/uniSolve/test.R')
set.seed(3)
n <- 100
x <- runif(n, min = -2.5, max = 2.5)
y <- cos(x) + rnorm(n, sd = 0.2)
theta <- rep(0,length(y))
ord <- order(x)
x.ord <- x[ord]
y.ord <- y[ord]
library(uniSolve)
myf <- function(x,y, y.ord, x.ord, theta, min.lam, max.lam,lam = 0.1){
lseq <- seq(min.lam, max.lam, length = 100)
ans <- sapply(lseq, function(lam){
lam*sqrt(get.pen(spline_s(y, y.ord, x.ord, theta, lam)))
})
plot(lseq,ans,type = "l", ylim = range(c(ans,lam)))
abline(h=lam)
}
myf(x,y,y.ord,x.ord,theta,1e-4,5,4)
myf(x,y,y.ord,x.ord,theta,1e-4,50,4)
myf(x,y,y.ord,x.ord,theta,1e-4,500,4)
myf(x,y,y.ord,x.ord,theta,1e-4,600,4)
myf(x,y,y.ord,x.ord,theta,1e-4,600,18)
obj <- spline_s(y,y.ord, x.ord, theta, 80)
plot(x,y)
lines(obj$x,obj$y, type = "p", col = "red")
obj <- spline_s(y,y.ord, x.ord, theta, 80)
plot(x,y)
lines(obj$x,obj$y, type = "p", col = "red")
obj <- spline_s(y,y.ord, x.ord, theta, 8)
plot(x,y)
lines(obj$x,obj$y, type = "p", col = "red")
lines(obj$x,obj$y, type = "o", col = "red")
obj <- spline_s(y,y.ord, x.ord, theta, 1)
plot(x,y)
lines(obj$x,obj$y, type = "o", col = "red")
obj <- spline_s(y,y.ord, x.ord, theta, 0.5)
plot(x,y)
lines(obj$x,obj$y, type = "o", col = "red")
obj <- spline_s(y,y.ord, x.ord, theta, 0.1)
plot(x,y)
lines(obj$x,obj$y, type = "o", col = "red")
obj <- spline_s(y,y.ord, x.ord, theta, 0.001)
plot(x,y)
lines(obj$x,obj$y, type = "o", col = "red")
obj <- spline_s(y,y.ord, x.ord, theta, 1)
plot(x,y)
lines(obj$x,obj$y, type = "o", col = "red")
obj <- spline_s(y,y.ord, x.ord, theta, 1000)
plot(x,y)
lines(obj$x,obj$y, type = "o", col = "red")
obj <- spline_s(y,y.ord, x.ord, theta, 100000)
plot(x,y)
lines(obj$x,obj$y, type = "o", col = "red")
obj1 <- spline_s(y,y.ord, x.ord, theta, 10)
obj2 <- spline_s(y,y.ord, x.ord, theta, 1)
obj1$sy
obj2 <- spline_s(y,y.ord, x.ord, theta, 1)
plot(x,y)
lines(obj$x,obj$sy, type = "o", col = "red")
obj2 <- spline_s(y,y.ord, x.ord, theta, 1)
plot(x,y)
lines(obj$x,obj$sy, type = "p", col = "red")
obj2 <- spline_s(y,y.ord, x.ord, theta, 1)
plot(x,y)
lines(obj$x,obj$sy, type = "l", col = "red")
obj2 <- spline_s(y,y.ord, x.ord, theta, 0.1)
plot(x,y)
lines(obj$x,obj$sy, type = "l", col = "red")
obj2 <- spline_s(y,y.ord, x.ord, theta, 0.10)
plot(x,y)
lines(obj$x,obj$sy, type = "l", col = "red")
obj2 <- spline_s(y,y.ord, x.ord, theta, 0.0010)
plot(x,y)
lines(obj$x,obj$sy, type = "l", col = "red")
obj2 <- spline_s(y,y.ord, x.ord, theta, 0.000010)
plot(x,y)
lines(obj$x,obj$sy, type = "l", col = "red")
obj2 <- spline_s(y,y.ord, x.ord, theta, 0.0000010)
plot(x,y)
lines(obj$x,obj$sy, type = "l", col = "red")
obj <- spline_s(y,y.ord, x.ord, theta, 0.0000010)
plot(x,y)
lines(obj$x,obj$sy, type = "l", col = "red")
obj <- spline_s(y,y.ord, x.ord, theta, 0.10)
plot(x,y)
lines(obj$x,obj$sy, type = "l", col = "red")
obj <- spline_s(y,y.ord, x.ord, theta, 10)
plot(x,y)
lines(obj$x,obj$sy, type = "l", col = "red")
obj <- spline_s(y,y.ord, x.ord, theta, 100)
plot(x,y)
lines(obj$x,obj$sy, type = "l", col = "red")
obj <- spline_s(y,y.ord, x.ord, theta, 1000)
plot(x,y)
lines(obj$x,obj$sy, type = "l", col = "red")
obj$yg
plot(obj$yg)
obj <- spline_s(y,y.ord, x.ord, theta, 10000)
plot(x,y)
lines(obj$x,obj$sy, type = "l", col = "red")
plot(obj$yg)
obj <- spline_s(y,y.ord, x.ord, theta, 10)
plot(x,y)
lines(obj$x,obj$sy, type = "l", col = "red")
library(uniSolve)
#junk <- tf_dp(y,y.ord,lambda,theta)
myf <- function(x,y, y.ord, x.ord, theta, min.lam, max.lam,lam = 0.1){
lseq <- seq(min.lam, max.lam, length = 100)
ans <- sapply(lseq, function(lam){
lam*sqrt(get.pen(spline_s(y, y.ord, x.ord, theta, lam)))
})
plot(lseq,ans,type = "l", ylim = range(c(ans,lam)))
abline(h=lam)
}
myf(x,y,y.ord,x.ord,theta,1e-4,600,18)
myf(x,y,y.ord,x.ord,theta,1e-4,60,18)
.5<0.6
.5^2<0.6^2
.5^(1/2)<0.6^(1/2)
set.seed(3)
n <- 100
x <- runif(n, min = -2.5, max = 2.5)
y <- cos(3*x) + rnorm(n, sd = 0.1)
theta <- rep(0,length(y))
plot(x,y)
ord <- order(x)
x.ord <- x[ord]
y.ord <- y[ord]
obj <- spline_s(y,y.ord, x.ord, theta, 10)
plot(x,y)
lines(obj$x,obj$sy, type = "l", col = "red")
obj <- spline_s(y,y.ord, x.ord, theta, 1)
plot(x,y)
lines(obj$x,obj$sy, type = "l", col = "red")
obj <- spline_s(y,y.ord, x.ord, theta, 0.1)
plot(x,y)
lines(obj$x,obj$sy, type = "l", col = "red")
library(uniSolve)
#junk <- tf_dp(y,y.ord,lambda,theta)
myf <- function(x,y, y.ord, x.ord, theta, min.lam, max.lam,lam = 0.1){
lseq <- seq(min.lam, max.lam, length = 100)
ans <- sapply(lseq, function(lam){
lam*sqrt(get.pen(spline_s(y, y.ord, x.ord, theta, lam)))
})
plot(lseq,ans,type = "l", ylim = range(c(ans,lam)))
abline(h=lam)
}
myf(x,y,y.ord,x.ord,theta,1e-4,1,1)
myf(x,y,y.ord,x.ord,theta,1e-4,1,5)
myf(x,y,y.ord,x.ord,theta,1e-4,1,3)
myf(x,y,y.ord,x.ord,theta,1e-4,3,3)
myf <- function(x,y, y.ord, x.ord, theta, min.lam, max.lam,lam = 0.1){
lseq <- seq(min.lam, max.lam, length = 100)
ans <- sapply(lseq, function(lam){
sqrt(get.pen(spline_s(y, y.ord, x.ord, theta, lam)))#*lam
})
plot(lseq,ans,type = "l", ylim = range(c(ans,lam)))
abline(h=lam)
}
myf(x,y,y.ord,x.ord,theta,1e-4,3,3)
myf <- function(x,y, y.ord, x.ord, theta, min.lam, max.lam,lam = 0.1){
lseq <- seq(min.lam, max.lam, length = 100)
ans <- sapply(lseq, function(lam){
sqrt(get.pen(spline_s(y, y.ord, x.ord, theta, lam)))#*lam
})
plot(lseq,ans,type = "l", ylim = range(c(ans,lam)))
#abline(h=lam)
}
myf(x,y,y.ord,x.ord,theta,1e-4,3,3)
myf(x,y,y.ord,x.ord,theta,1e-4,1,3)
myf(x,y,y.ord,x.ord,theta,1e-4,30,3)
myf(x,y,y.ord,x.ord,theta,1e-4,3,3)
myf <- function(x,y, y.ord, x.ord, theta, min.lam, max.lam,lam = 0.1){
lseq <- seq(min.lam, max.lam, length = 100)
ans <- sapply(lseq, function(lam){
sqrt(get.pen(spline_s(y, y.ord, x.ord, theta, lam)))*lam
})
plot(lseq,ans,type = "l", ylim = range(c(ans,lam)))
#abline(h=lam)
}
myf(x,y,y.ord,x.ord,theta,1e-4,3,3)
myf <- function(x,y, y.ord, x.ord, theta, min.lam, max.lam,lam = 0.1){
lseq <- seq(min.lam, max.lam, length = 100)
ans <- sapply(lseq, function(lam){
sqrt(get.pen(spline_s(y, y.ord, x.ord, theta, lam)))*lam
})
plot(lseq,ans,type = "l", ylim = range(c(ans,lam)))
abline(h=lam)
}
myf(x,y,y.ord,x.ord,theta,1e-4,3,3)
set.seed(1)
n <- 100
x <- runif(n, min = -2.5, max = 2.5)
y <- cos(3*x) + rnorm(n, sd = 0.1)
theta <- rep(0,length(y))
plot(x,y)
ord <- order(x)
x.ord <- x[ord]
y.ord <- y[ord]
obj <- spline_s(y,y.ord, x.ord, theta, 0.1)
plot(x,y)
lines(obj$x,obj$sy, type = "l", col = "red")
library(uniSolve)
myf <- function(x,y, y.ord, x.ord, theta, min.lam, max.lam,lam = 0.1){
lseq <- seq(min.lam, max.lam, length = 100)
ans <- sapply(lseq, function(lam){
sqrt(get.pen(spline_s(y, y.ord, x.ord, theta, lam)))*lam
})
plot(lseq,ans,type = "l", ylim = range(c(ans,lam)))
abline(h=lam)
}
myf(x,y,y.ord,x.ord,theta,1e-4,3,3)
myf(x,y,y.ord,x.ord,theta,1e-4,1,1)
myf2 <- function(x,y, y.ord, x.ord, theta, min.lam, max.lam,lam = 0.1){
lseq <- seq(min.lam, max.lam, length = 100)
n <- length(x)
ans <- sapply(lseq, function(lam){
obj <- spline_s(y, y.ord, x.ord, theta, lam)
(0.5/n)*(y.ord - obj$sy) + sqrt(get.pen(obj))*lam
})
plot(lseq,ans,type = "l", ylim = range(c(ans,lam)))
abline(h=lam)
}
myf(x,y,y.ord,x.ord,theta,1e-4,1,1)
myf2(x,y,y.ord,x.ord,theta,1e-4,1,1)
class(obj)
set.seed(1)
n <- 100
x <- runif(n, min = -2.5, max = 2.5)
y <- cos(3*x) + rnorm(n, sd = 0.1)
theta <- rep(0,length(y))
plot(x,y)
ord <- order(x)
x.ord <- x[ord]
y.ord <- y[ord]
obj <- spline_s(y,y.ord, x.ord, theta, 0.1)
plot(x,y)
lines(obj$x,obj$sy, type = "l", col = "red")
library(uniSolve)
myf <- function(x,y, y.ord, x.ord, theta, min.lam, max.lam,lam = 0.1){
lseq <- seq(min.lam, max.lam, length = 100)
ans <- sapply(lseq, function(lam){
sqrt(get.pen(spline_s(y, y.ord, x.ord, theta, lam)))*lam
})
plot(lseq,ans,type = "l", ylim = range(c(ans,lam)))
abline(h=lam)
}
myf2 <- function(x,y, y.ord, x.ord, theta, min.lam, max.lam,lam = 0.1){
lseq <- seq(min.lam, max.lam, length = 100)
n <- length(x)
ans <- sapply(lseq, function(lam){
obj <- spline_s(y, y.ord, x.ord, theta, lam)
(0.5/n)*(y.ord - obj$sy) + sqrt(get.pen(obj))*lam
})
plot(lseq,ans,type = "l", ylim = range(c(ans,lam)))
abline(h=lam)
}
myf2(x,y,y.ord,x.ord,theta,1e-4,1,1)
library(uwIntroStats)
?uwIntroStats::lincom
?regress
x <- rnorm(100)
y <- rnorm(100)
cbind(x,y)
regress("mean", log(y)~x)
y <- runif(100, 10,100)
regress("mean", log(y)~x)
regress("geometricmean", log(y)~x)
regress("geometric mean", log(y)~x)
regress("geometric mean", (y)~x)
regress("mean", log(y)~x)
regress("geometric mean", (y)~x)
library(uniSolve)
set.seed(1)
x <- x.ord <- sort(runif(200, -2.5,2.5))
y <- y.ord <- sin(2*x) + rnorm(200, sd = 0.3)
x <- cbind(x, runif(200, -2.5,2.5),runif(200, -2.5,2.5),runif(200, -2.5,2.5))
y.mean <- mean(y)
x.mean <- apply(x,2,mean)
ord <- apply(x,2,rank)
y <- y-mean(y)
x <- scale(x, scale = FALSE)
max.iter <- 100
tol <- 1e-4
initpars <- NULL; lambda1 <- 0.2;
lambda2 <- lambda1^2
n <- length(y)
p <- ncol(x)
spline_s(y,y,x[,1], rep(0,200), 0.1)
a <- spline_s(y,y,x[,1], rep(0,200), 0.1)
plot(x[,1],y)
plot(x[,1],y)
a <- spline_s(y,y,x[,1], rep(0,200), 0.1)
lines(x[,1], a$sy)
a <- spline_s(y,y,x[,1], rep(0,200), 0.001)
plot(x[,1],y)
lines(x[,1], a$sy)
a <- spline_s(y,y,x[,1], rep(0,200), 0.0001)
plot(x[,1],y)
lines(x[,1], a$sy)
a <- spline_s(y,y,x[,1], rep(0,200), 0.00001)
plot(x[,1],y)
lines(x[,1], a$sy)
a <- spline_s(y,y,x[,1], rep(0,200), 1)
plot(x[,1],y)
lines(x[,1], a$sy)
library(uniSolve)
a <- spline_s(y,y,x[,1], rep(0,200), 1)
plot(x[,1],y)
lines(x[,1], a$sy)
a <- spline_s(y,y,x[,1], rep(0,200), 2)
plot(x[,1],y)
lines(x[,1], a$sy)
a <- spline_s(y,y,x[,1], rep(0,200), 0.001)
plot(x[,1],y)
lines(x[,1], a$sy)
a <- spline_s(y,y,x[,1], rep(0,200), 0.1)
plot(x[,1],y)
lines(x[,1], a$sy)
sqrt(0.1)
set.seed(1)
x <- x.ord <- sort(runif(200, -2.5,2.5))
y <- y.ord <- sin(2*x) + rnorm(200, sd = 0.3)
x <- cbind(x, runif(200, -2.5,2.5),runif(200, -2.5,2.5),runif(200, -2.5,2.5))
y.mean <- mean(y)
x.mean <- apply(x,2,mean)
ord <- apply(x,2,rank)
y <- y-mean(y)
x <- scale(x, scale = FALSE)
max.iter <- 100
tol <- 1e-4
initpars <- NULL; lambda1 <- 0.3;
lambda2 <- lambda1^2
a <- spline_s(y,y,x[,1], rep(0,200), lambda2)
plot(x[,1],y)
lines(x[,1], a$sy)
n <- length(y)
p <- ncol(x)
if(is.null(initpars)) {
initpars <- matrix(0, ncol = p, nrow = n)
}
old.pars <- initpars
i <- j <- 1
i <- j <- 1
res <- y - apply(initpars[, -j],1,sum)
a <- solve.prox(res, res[ord[,j]], x[ord[,j],j], rep(0, n), lambda1, lambda2)
a
lambda1
lambda2
n
lambda2
tempf <- function(lam_x) {
obj <- spline_s(y, y, x[,1], theta = rep(0, n), lam_x)
lam_x*get.pen(obj) - lambda2/2
}
xs <- seq(0.001, 3, length = 1000)
plot(xs, sapply(xs,tempf))
xs <- seq(0.001, 3, length = 1000)
plot(xs, sapply(xs,tempf))
abline(h = 0)
xs <- seq(0.001, 30, length = 1000)
plot(xs, sapply(xs,tempf))
abline(h = 0)
xs <- seq(0.001, 300, length = 1000)
plot(xs, sapply(xs,tempf))
abline(h = 0)
xs <- seq(0.001, 30, length = 1000)
plot(xs, sapply(xs,tempf))
abline(h = 0)
xs <- seq(0.001, 3, length = 1000)
plot(xs, sapply(xs,tempf))
abline(h = 0)
xs <- seq(0.0001, 3, length = 1000)
plot(xs, sapply(xs,tempf))
abline(h = 0)
xs <- seq(0.0001, 0.001, length = 1000)
plot(xs, sapply(xs,tempf))
abline(h = 0)
xs <- seq(0.0001, 0.01, length = 1000)
plot(xs, sapply(xs,tempf))
abline(h = 0)
lambda2
a <- spline_s(y,y,x[,1], rep(0,200), lambda2)
plot(x[,1],y)
lines(x[,1], a$sy)
a <- spline_s(y,y,x[,1], rep(0,200), lambda2*1e-3)
plot(x[,1],y)
lines(x[,1], a$sy)
a <- spline_s(y,y,x[,1], rep(0,200), lambda2*1e-10)
plot(x[,1],y)
lines(x[,1], a$sy)
lambda2*1e-10
a <- spline_s(y,y,x[,1], rep(0,200), 0.0001)
plot(x[,1],y)
lines(x[,1], a$sy)
a <- spline_s(y,y,x[,1], rep(0,200), 0.1)
plot(x[,1],y)
lines(x[,1], a$sy)
tempf <- function(lam_x) {
obj <- spline_s(y, y, x[,1], theta = rep(0, n), lam_x)
lam_x*get.pen(obj)/2 - lambda2
}
xs <- seq(0.0001, 0.01, length = 1000)
plot(xs, sapply(xs,tempf))
abline(h = 0)
tempf <- function(lam_x) {
obj <- spline_s(y, y, x[,1], theta = rep(0, n), lam_x)
lam_x*get.pen(obj) - lambda2/2
}
xs <- seq(0.0001, 0.01, length = 1000)
plot(xs, sapply(xs,tempf))
abline(h = 0)
xs <- seq(0.001, 0.002, length = 1000)
plot(xs, sapply(xs,tempf))
abline(h = 0)
library(uniSolve)
tempf <- function(lam_x) {
obj <- spline_s(y, y, x[,1], theta = rep(0, n), lam_x)
lam_x*get.pen(obj) - lambda2/2
}
xs <- seq(0.001, 0.002, length = 1000)
plot(xs, sapply(xs,tempf))
tempf <- function(lam_x) {
obj <- spline_s(y, y, x[,1], theta = rep(0, n), lam_x)
lam_x*get.pen(obj) - lambda2/2
}
xs <- seq(0.001, 0.2, length = 1000)
plot(xs, sapply(xs,tempf))
abline(h = 0)
library(uniSolve)
set.seed(1)
n <- 100
x <- runif(n, min = -2.5, max = 2.5)
y <- sin(3*x) + rnorm(n, sd = 0.1)
theta <- rep(0,length(y))
par(mfrow = c(1,1))
plot(x,y)
ord <- order(x)
x.ord <- x[ord]
y.ord <- y[ord]
obj <- spline_s(y,y.ord, x.ord, theta, 1e-5)
plot(x,y)
lines(obj$x,obj$sy, type = "l", col = "red")
obj2 <- tf_dp(y,y.ord,1,rep(0,n))
lines(x.ord, obj2$beta)
obj3 <- tf_test(y,y.ord,1)
lines(x.ord, obj3$beta, col = "blue")
obj3$beta
obj3$beta - obj2$beta
install.packages("glmgen")
library(devtools)
install_github("statsmaths/glmgen", subdir="R_pkg/glmgen")
install.packages("genlasso")
